## 设计原则 ##

- **找出应用可能需要变化之处，把他们独立出来，不要把他们和那些不需要变化的代码混在一起。**

- **针对接口编程，而不是针对实现编程**

- **多用组合 少用继承**

【针对接口编程】真正的意义是【针对超类型（supertype）编程】，关键就在多态，利用多态，程序可以针对超类型编程，执行时会根据实际状况执行到真正的行为，不会绑死在超类型的行为上。

【有一个】关系相当的有趣：每一个鸭子都有一个FlyBehavior且有一个QuackBehavior,让鸭子将飞行和叫的行为委托给他们代为处理。
当我们将两个类结起来使用，就是组合（composition）。这种做法和【继承】不通的地方在于，鸭子的行为不是继承而来的，而是和适当的行为对象【组合】而来。

我们将【行为】想成是【一族算法】。在SimDuck的设计中，算法代表叶子能做的事，这样的做法也能用于一群类计算不通州的销售税金。

> [策略模式] 定义了算法族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化独立与使用算法的客户。


